Product of Array Except Self
Question
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all elements of nums except nums[i]. We have to do it in linear time O(N). There will be negative integers in the array,

Inputs
How will you do it by hand?
Cases:

All positive

Input: nums = [1,2,3,4]
Output: [24,12,8,6]

What will the answer array look like
answer = [2*3*4, 1*3*4 , 1*2*4 ,1*2*3]

So will take the product of all values accept of the index 
we are on(for index 0 we didn't take the value of 1)Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
negative


Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

We will do the same[1*0*3*3,....-1*1*0*-3]

We know once we have a zero in the array all elements 
are going to be zero except the index where zero is. 
And if we have 2 negatives the product will be positive/
Solution
Explanation
nums = [1,2,3,4]
answer = [2*3*4, 1*3*4 , 1*2*4 ,1*2*3]
Since we have the answer like this what insights you can derive about the answer.

AT index 2 of the answer [1*2*4] 
Can be decomposed into (1*2) * (4)
We are taking the product of values to the left side of the index as well as the right side.

What if we had an array that on each index had the product of all its values on the right and the other all the values on the left.

nums = [1,2,3,4]
leftProduct = [1,1,2,6]
rightProduct = [24,12,4,1]
leftProduct[i] * rightProduct[i] = answer[i]  
In code

leftProduct = [None] * len(nums)
#leftProduct = [1,1,2,6] 
#left Product 
productSoFar = 1
for index in range(len(nums)):
    leftProduct[index] = productSoFar
    productSoFar *= nums[index]
Same for right but in reverse

#right Product = [24,12,4,1]
productSoFar = 1
for index in range((len(nums))-1,-1,-1):
    rightProduct[index] = productSoFar
    productSoFar *= nums[index]
now we take the product

answer = [None] * len(nums)
  #total Product
  for i in range(len(nums)):
      answer[i] = leftProduct[i] * rightProduct[i]
      
  return answer
Code
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        
        
       
        
    #left Product    
    #O(N) Space
    #O(N) Time
    
        leftProduct = [None] * len(nums)
        
        productSoFar = 1
        for index in range(len(nums)):
            leftProduct[index] = productSoFar
            productSoFar *= nums[index]
        
    #right Product
    #O(N) Space
    #O(N) Time
    
        rightProduct = [None] * len(nums)
        
        productSoFar = 1
        for index in range((len(nums))-1,-1,-1):
            rightProduct[index] = productSoFar
            productSoFar *= nums[index]
        
    #total Product
    #O(N) Space
    #O(N) Time
        
        answer = [None] * len(nums)
        
        for i in range(len(nums)):
            answer[i] = leftProduct[i] * rightProduct[i]
            
        return answer
Time Complexity
Time ‚è∞ O(3N) Space üíæ O(3N)

We are using a lot of space instead of doing the product in separate arrays can we do it in one and return that array.

Sure can

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        
    #O(N) Space
        answer = [None] * len(nums)
        
        
    #leftProduct
    #0(N) time

        productSofar = 1
        for index in range(len(nums)):
            answer[index] = productSofar
            productSofar *= nums[index]
    
    #rightProduct * leftProduct = answer    
    #0(N) time
        
        productSofar = 1
        for index in range((len(nums)-1),-1,-1):
            answer[index] *= productSofar
            productSofar *= nums[index]
            
            
        return answer
Time ‚è∞ O(2N) Space üíæ O(N)