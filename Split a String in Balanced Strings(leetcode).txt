Balanced strings are those that have an equal quantity of 'L' and 'R' characters.

Given a balanced string s, split it in the maximum amount of balanced strings.

Return the maximum amount of split balanced strings.

 

Example 1:

Input: s = "RLRRLLRLRL"
Output: 4
Explanation: s can be split into "RL", "RRLL", "RL", "RL", each substring contains same number of 'L' and 'R'.
Example 2:

Input: s = "RLLLLRRRLR"
Output: 3
Explanation: s can be split into "RL", "LLLRRR", "LR", each substring contains same number of 'L' and 'R'.



class Solution:
    def balancedStringSplit(self, s: str) -> int:
        countr=0
        countl=0
        maincount=0
        for i in s:
            if i=="L":
                countl+=1
            elif i=="R":
                countr+=1
            if countl==countr:
                maincount+=1
        return maincount


class Solution {
    public int balancedStringSplit(String s) {
        int countl=0;
        int countr=0;
        int result=0;
        for(char c: s.toCharArray())
        {
            if (c=='R')
                countr++;
            else if (c=='L')
                countl++;
            
            if (countl==countr)
            {
                result++;
            }
        }
        return result;
    }
}